#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUNC    3
#define MEDIA   4
#define MOUSE   5
#define WINNAV  6

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_undo {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(Z)>;
        };
        combo_q {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp Q>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp SEMI>;
        };
    };
};

/ {

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Default";

            bindings = <
    &kp Q        &kp W        &kp F       &kp P         &kp G                                       &kp J         &kp L        &lt WINNAV U  &kp Y       &kp SEMI
    &mt LCTL A   &mt LALT R   &hm LGUI S  &hm LSHIFT T  &kp D                                       &kp H         &hm RSHIFT N &hm RGUI E    &hm RALT I  &hm RCTL O
    &kp Z        &kp X        &kp C       &kp V         &kp B                                       &kp K         &kp M        &kp COMMA     &kp DOT     &kp FSLH
                                          &kp ESC       &lt FUNC TAB  &lt NAV SPACE  &lt SYM RET  &lt MEDIA BSPC  &kp MINUS
            >;
        };

        nav_layer {
            label = "Navigation";

            bindings = <
    &trans           &trans       &trans       &trans         &trans               &trans        &kp LEFT_BRACE   &kp RIGHT_BRACE   &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS
    &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_GUI &kp LEFT_SHIFT &trans               &trans        &kp LEFT         &kp DOWN          &kp UP               &kp RIGHT
    &trans           &trans       &trans       &trans         &trans               &trans        &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LESS_THAN        &kp GREATER_THAN
                                               &trans         &trans &trans &trans &trans        &trans
            >;
        };

        sym_layer {
            label = "Symbols";

            bindings = <
    &kp TILDE &kp EXCLAMATION &kp AT_SIGN &kp HASH      &kp DOLLAR                 &trans &trans          &trans        &trans            &trans
    &kp PIPE  &kp BACKSLASH   &kp PLUS    &kp EQUAL     &kp QUESTION               &trans &kp RIGHT_SHIFT &kp RIGHT_GUI &kp RIGHT_ALT &kp RIGHT_CONTROL
    &kp GRAVE &kp PERCENT     &kp CARET   &kp AMPERSAND &kp ASTERISK               &trans &trans          &trans        &trans            &trans
                                          &trans        &trans       &trans &trans &trans &trans
            >;
        };

        func_layer {
            label = "Function";

            bindings = <
    &bootloader  &kp LS(PG_UP) &kp LS(UP)   &kp LS(PG_DN) &trans                                         &trans       &kp NUMBER_7       &kp NUMBER_8        &kp NUMBER_9      &kp C_MUTE
    &kp LS(HOME) &kp LS(LEFT)  &kp LS(DOWN) &kp LS(RIGHT) &kp LS(END)                                    &trans     &kp NUMBER_4       &kp NUMBER_5        &kp NUMBER_6      &kp K_VOL_UP
    &bt BT_SEL 3 &bt BT_SEL 2  &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR                                     &kp NUMBER_0     &kp NUMBER_1       &kp NUMBER_2        &kp NUMBER_3      &kp K_VOL_DN
                                            &out OUT_USB  &out OUT_BLE     &trans      &trans  &kp COMMA     &kp PERIOD
            >;
        };

        media_layer {
            label = "Media";

            bindings = <
    &trans       &trans       &trans        &trans            &trans                                      &trans             &bt BT_PRV        &bt BT_NXT         &trans         &trans
    &trans       &trans       &trans        &trans            &trans                                      &trans             &trans            &trans             &trans         &trans
    &trans       &trans       &trans        &trans            &trans                                      &bt BT_CLR         &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3
                                            &trans            &trans        &trans         &trans         &out OUT_BLE       &out OUT_USB
            >;
        };

        mouse_layer {
            label = "Mouse";

            bindings = <
    &bootloader &trans      &trans      &trans      &trans                                           &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans                                           &trans      &trans      &trans      &trans      &trans
    &trans      &trans      &trans      &trans      &trans                                           &trans      &trans      &trans      &trans      &trans
                                        &trans      &trans          &trans           &trans          &trans      &trans
            >;
        };

        winnav_layer {
            label = "Win Navigation";

            bindings = <
    &trans       &trans       &kp LG(UP)   &trans        &trans                                      &trans      &trans      &trans      &trans      &trans
    &trans       &kp LG(LEFT) &kp LG(DOWN) &kp LG(RIGHT) &trans                                      &trans      &trans      &trans      &trans      &trans
    &trans       &trans       &trans       &trans        &trans                                      &trans      &trans      &trans      &trans      &trans
                                           &trans        &trans        &trans         &trans         &trans      &trans
            >;
        };
    };
};
